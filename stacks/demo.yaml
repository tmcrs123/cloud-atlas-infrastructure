AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  Environment:
    Type: String
    Description: Deployment of cloud atlas demo
    Default: demo
  MessageHandlerLambdaS3ObjectVersion:
    Type: String
  ProcessImageLambdaS3ObjectVersion:
    Type: String
  StopServiceLambdaS3ObjectVersion:
    Type: String
  CreateInvalidationLambdaS3ObjectVersion:
    Type: String
Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are four subnets which cover the ranges:
  #
  # 10.0.0.0 - 10.0.63.255 (16384 IP addresses)
  # 10.0.64.0 - 10.0.127.255 (16384 IP addresses)
  # 10.0.128.0 - 10.0.191.255 (16384 IP addresses)
  # 10.0.192.0 - 10.0.255.0 (16384 IP addresses)
  #
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    PublicOne:
      CIDR: "10.0.0.0/18"
    PublicTwo:
      CIDR: "10.0.64.0/18"
  ############################################# VPC
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ["SubnetConfig", "VPC", "CIDR"]
      Tags:
        - Key: Name
          Value: !Sub "cloud-atlas-${Environment}-vpc"

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "PublicOne", "CIDR"]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "cloud-atlas-${Environment}-public-subnet-one"

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "PublicTwo", "CIDR"]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "cloud-atlas-${Environment}-public-subnet-two"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "cloud-atlas-${Environment}-internet-gateway"

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "InternetGateway"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: !Sub "cloud-atlas-${Environment}-public-route-table"
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "InternetGateway"

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref "VPC"

  ContainerSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ContainerSecurityGroup
      SourceSecurityGroupId: !Ref ContainerSecurityGroup
      IpProtocol: tcp
      FromPort: 3000
      ToPort: 3000

  ############################## DYNAMO

  AtlasTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "cloud-atlas-${Environment}-atlas"
      AttributeDefinitions:
        - AttributeName: atlasId
          AttributeType: S
      KeySchema:
        - AttributeName: atlasId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  MarkersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "cloud-atlas-${Environment}-markers"
      AttributeDefinitions:
        - AttributeName: atlasId
          AttributeType: S
        - AttributeName: markerId
          AttributeType: S
      KeySchema:
        - AttributeName: atlasId
          KeyType: HASH
        - AttributeName: markerId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  ImagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "cloud-atlas-${Environment}-images"
      AttributeDefinitions:
        - AttributeName: atlasId
          AttributeType: S
        - AttributeName: imageId
          AttributeType: S
        - AttributeName: markerId
          AttributeType: S
      KeySchema:
        - AttributeName: atlasId
          KeyType: HASH
        - AttributeName: imageId
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: !Sub "cloud-atlas-${Environment}-images-table-LSI"
          KeySchema:
            - AttributeName: atlasId
              KeyType: HASH
            - AttributeName: markerId
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - "atlasId"
              - "imageId"
              - "comment"
            ProjectionType: "INCLUDE"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  OwnersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "cloud-atlas-${Environment}-owners"
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: atlasId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: atlasId
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: !Sub "cloud-atlas-${Environment}-owners-table-LSI"
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: atlasId
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - "atlasId"
              - "userId"
            ProjectionType: "INCLUDE"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # ################################### CLOUDFRONT
  UICloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultRootObject: index.html
        Origins:
          - DomainName:
              !Join [
                "",
                [
                  !Sub "cloud-atlas-${Environment}-ui",
                  ".s3.",
                  !Sub "${AWS::Region}",
                  ".amazonaws.com",
                ],
              ]
            Id: !Sub "cloud-atlas-${Environment}-ui"
            OriginAccessControlId: !GetAtt CloudfrontDistributionOriginAccessControl.Id
            S3OriginConfig: {}
        Enabled: "true"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: !Sub "cloud-atlas-${Environment}-ui"
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ErrorCachingMinTTL: 10
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ErrorCachingMinTTL: 10
            ResponsePagePath: /index.html
        Aliases:
          - demo.cloud-atlas.net
          - www.demo.cloud-atlas.net
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:891376964515:certificate/e0f5ed31-2ed9-41a3-8701-7be09cb4fa18
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only

  OptimizedPhotosCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub "cloud-atlas-${Environment}-optimized.s3.us-east-1.amazonaws.com"
            Id: !Sub "cloud-atlas-${Environment}-optimized"
            OriginAccessControlId: !GetAtt CloudfrontDistributionOriginAccessControl.Id
            S3OriginConfig: {}
        Enabled: "true"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: !Sub "cloud-atlas-${Environment}-optimized"
          TrustedKeyGroups:
            - !Ref OptimizedPhotosCloudfrontKeyGroup
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt OptimizedPhotosPreventReferrerFunction.FunctionARN
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ViewerProtocolPolicy: redirect-to-https

  OptimizedPhotosPreventReferrerFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub cloud-atlas-${Environment}-optimized-photos-prevent-referer-function
      AutoPublish: true
      FunctionCode: !Sub |
        function handler(event) {
          const refererHeader = event.request.headers['referer'] 
          if(refererHeader.value.includes('https://demo.cloud-atlas.net') || refererHeader.value.includes('https://demo.cloud-atlas.net') || refererHeader.value.includes('https://www.demo.cloud-atlas.net')  ){
            return event.request;
          } else {
            return {
                statusCode: 401,
                statusDescription: 'Unauthorized'
              }
          }
        }
      FunctionConfig:
        Comment: Only allow certain referrers to fetch images
        Runtime: cloudfront-js-2.0

  OptimizedPhotosCloudfrontKeyGroup:
    Type: AWS::CloudFront::KeyGroup
    Properties:
      KeyGroupConfig:
        Items:
          - !Ref OptimizedPhotosCloudfrontPublicKey
        Name: !Sub cloud-atlas-${Environment}-optimized-photos-cloudfront-keygroup

  OptimizedPhotosCloudfrontPublicKey:
    Type: AWS::CloudFront::PublicKey
    Properties:
      PublicKeyConfig:
        CallerReference: !Sub T1TTTt07XlT${Environment} ##just needs to be a random string, this has no meaning
        EncodedKey: |
          -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzvC4ey6pDF/1XE/ikjKW
          lLxwE6WArDJYYMY4OaA05mzAoQFTpq+duIga6+lh2uIexP+nwpL0iVjLPIV8xUZt
          nbjg347xRorinTj7iYmZuwAi+L1w1cmFCY1PokSCr0RpCO/0StKH3F2CR9GE4RnU
          7pDNj+uOG6Ytz0YeVYzzVubls88GH5hiW/muyh8z2LW2VehZjS+9SyGchq+T3KMp
          RN5wadoRqPNKpqufOqUtr5bsEG4zSUmSwTRxPgnHqk37pegicLdx4NbYkCFG6cMs
          Wd+/D3aKH0JCAtdroueOJFcjlm6tW9+LWHLw1b+oC7b+Xvb1u5nBzx67qza2IJbF
          UwIDAQAB
          -----END PUBLIC KEY-----

        Name: !Sub cloud-atlas-${Environment}-optimized-photos-public-key

  CloudfrontDistributionOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub cloud-atlas-${Environment}-origin-access-control
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # ############################################# COGNITO
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "cloud-atlas-${Environment}-user-pool"
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      Schema:
        - Name: email
          Required: true
          Mutable: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameAttributes:
        - email
      MfaConfiguration: "OFF"
      EmailVerificationSubject: "Your verification code"
      EmailVerificationMessage: "Your verification code is {####}"
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "cloud-atlas-${Environment}-user-pool-client"
      UserPoolId: !Ref CognitoUserPool
      SupportedIdentityProviders:
        - COGNITO
      GenerateSecret: false
      EnableTokenRevocation: true
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
      CallbackURLs:
        - !Sub https://demo.cloud-atlas.net/redirect
      LogoutURLs:
        - !Sub https://demo.cloud-atlas.net

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub cloud-atlas-${Environment}
      UserPoolId: !Ref CognitoUserPool

  # ########################################## Secrets Manager
  CloudfrontPrivateKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub cloud-atlas-${Environment}-cloudfront-private-key
      Description: The private key used by cloudfront to sign urls
  # ########################################## SQS
  OptimizedImagesQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Sub "cloud-atlas-${Environment}-optimized-images-queue"
      VisibilityTimeout: 30
      MessageRetentionPeriod: 345600
      DelaySeconds: 0
      MaximumMessageSize: 262144
      ReceiveMessageWaitTimeSeconds: 0

  # ########################################## SNS
  BucketEventsTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: !Sub "cloud-atlas-${Environment}-bucket-events-topic"
      TopicName: !Sub "cloud-atlas-${Environment}-bucket-events-topic"

  BucketEventsTopicSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      TopicArn: !Ref BucketEventsTopic
      Protocol: lambda
      Endpoint: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cloud-atlas-${Environment}-message-handler

  BucketEventsTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      Topics:
        - !Ref BucketEventsTopic
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "s3.amazonaws.com"
            Action: "SNS:Publish"
            Resource: !Ref BucketEventsTopic
            Condition:
              StringEquals:
                Aws:SourceAccount: !Sub "${AWS::AccountId}"

  # ########################################## S3
  DumpBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "cloud-atlas-${Environment}-dump"
      AccessControl: Private
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:cloud-atlas-${Environment}-bucket-events-topic
            Event: "s3:ObjectCreated:*"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - POST
            AllowedOrigins:
              - "*"
            MaxAge: 3600

  OptimizedBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "cloud-atlas-${Environment}-optimized"
      AccessControl: Private
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:cloud-atlas-${Environment}-bucket-events-topic
            Event: "s3:ObjectCreated:*"
  OptimizedBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: OptimizedBucket
    Properties:
      Bucket: !Ref OptimizedBucket
      PolicyDocument:
        Id: PolicyForCloudFrontPrivateContent
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::cloud-atlas-${Environment}-optimized/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Join
                  - ""
                  - - "arn:aws:cloudfront::"
                    - !Sub ${AWS::AccountId}
                    - ":distribution/"
                    - !Ref OptimizedPhotosCloudfrontDistribution

  UIBucket:
    Type: AWS::S3::Bucket
    DependsOn: CreateCloudfrontInvalidationInvokePermission
    Properties:
      BucketName: !Sub cloud-atlas-${Environment}-ui
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cloud-atlas-${Environment}-create-cloudfront-invalidation
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: index.html
  UIBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: UIBucket
    Properties:
      Bucket: !Sub cloud-atlas-${Environment}-ui
      PolicyDocument:
        Id: PolicyForCloudFrontPrivateContent
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::cloud-atlas-${Environment}-ui/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Join
                  - ""
                  - - "arn:aws:cloudfront::"
                    - !Sub ${AWS::AccountId}
                    - ":distribution/"
                    - !Ref UICloudfrontDistribution

  # ############################################## LAMBDA
  ProcessImageFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "cloud-atlas-${Environment}-process-image"
      MemorySize: 256
      Handler: index.handler
      Role: !GetAtt ProcessImageRole.Arn
      Runtime: nodejs18.x
      Timeout: 10
      Code:
        S3Bucket: cloud-atlas-lambdas
        S3Key: process-image.zip
        S3ObjectVersion: !Sub ${ProcessImageLambdaS3ObjectVersion}
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          NODE_ENV: !Sub ${Environment}
          LOCAL_ENDPOINT: placeholder
          DUMP_BUCKET_NAME: !Sub "cloud-atlas-${Environment}-dump"
          OPTIMIZED_BUCKET_NAME: !Sub "cloud-atlas-${Environment}-optimized"
      Tags:
        - Key: Name
          Value: !Sub "cloud-atlas-${Environment}-process-image"

  MessageHandlerFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "cloud-atlas-${Environment}-message-handler"
      Handler: index.handler
      Role: !GetAtt MessageHandlerRole.Arn
      Runtime: nodejs18.x
      Code:
        S3Bucket: cloud-atlas-lambdas
        S3Key: message-handler.zip
        S3ObjectVersion: !Sub ${MessageHandlerLambdaS3ObjectVersion}
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          NODE_ENV: !Sub ${Environment}
          LOCAL_ENDPOINT: placeholder
          DUMP_BUCKET_NAME: !Sub "cloud-atlas-${Environment}-dump"
          OPTIMIZED_BUCKET_NAME: !Sub "cloud-atlas-${Environment}-optimized"
          PROCESS_IMAGE_FN_NAME: !Sub "cloud-atlas-${Environment}-process-image"
          QUEUE_URL: !Ref OptimizedImagesQueue
      Tags:
        - Key: Name
          Value: !Sub "cloud-atlas-${Environment}-message-handler"

  MessageHandlerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MessageHandlerFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref BucketEventsTopic

  ProcessImageRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub cloud-atlas-${Environment}-process-image-lambda-ReadFromDump
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::cloud-atlas-${Environment}-dump/*"
        - PolicyName: !Sub cloud-atlas-${Environment}-process-image-lambda-WriteToOptimized
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::cloud-atlas-${Environment}-optimized/*"

  MessageHandlerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt ProcessImageFunction.Arn
        - PolicyName: SQSSendMessagePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt OptimizedImagesQueue.Arn
        - PolicyName: removeFromOptimizedBucketRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::cloud-atlas-${Environment}-optimized/*"
                  - !Sub "arn:aws:s3:::cloud-atlas-${Environment}-dump/*"

  StopStartServiceFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "cloud-atlas-${Environment}-stop-service"
      Handler: index.handler
      Role: !GetAtt StopStartServiceRole.Arn
      Runtime: nodejs18.x
      Code:
        S3Bucket: cloud-atlas-lambdas
        S3Key: stop-service.zip
        S3ObjectVersion: !Sub ${StopServiceLambdaS3ObjectVersion}
      Environment:
        Variables:
          SERVICE_NAME: !GetAtt ECSService.Name
          CLUSTER_NAME: !Sub cloud-atlas-${Environment}
      Tags:
        - Key: Name
          Value: !Sub "cloud-atlas-${Environment}-stop-service"

  StopStartServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ECSUpdateService
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                Resource: !Ref ECSService

  StopStartFunctionInvokePermissionForStop:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StopStartServiceFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StopServiceScheduledRule.Arn

  StopStartFunctionInvokePermissionForStart:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StopStartServiceFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StartServiceScheduledRule.Arn

  CreateCloudfrontInvalidationFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "cloud-atlas-${Environment}-create-cloudfront-invalidation"
      Handler: index.handler
      Role: !GetAtt CreateCloudfrontInvalidationRole.Arn
      Runtime: nodejs18.x
      Code:
        S3Bucket: cloud-atlas-lambdas
        S3Key: create-invalidation.zip
        S3ObjectVersion: !Sub ${CreateInvalidationLambdaS3ObjectVersion}
      Environment:
        Variables:
          DISTRIBUTION_ID: !Ref UICloudfrontDistribution
      Tags:
        - Key: Name
          Value: !Sub "cloud-atlas-${Environment}-create-cloudfront-invalidation"

  CreateCloudfrontInvalidationInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: CreateCloudfrontInvalidationFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cloud-atlas-${Environment}-create-cloudfront-invalidation
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:s3:::cloud-atlas-${Environment}-ui

  CreateCloudfrontInvalidationRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CreateInvalidation
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: !Join
                  - ""
                  - - "arn:aws:cloudfront::"
                    - !Sub ${AWS::AccountId}
                    - ":distribution/"
                    - !Ref UICloudfrontDistribution

  ################################### EVENT Bridge
  ScheduledRuleRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt StopStartServiceFunction.Arn

  StopServiceScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Shut down service everyday at 7pm"
      RoleArn: !GetAtt ScheduledRuleRole.Arn
      ScheduleExpression: "cron(0 19 * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "StopStartServiceFunction"
              - "Arn"
          Id: stopServiceFn
          Input: '{"start": false}'

  StartServiceScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Start service everyday at 8am"
      RoleArn: !GetAtt ScheduledRuleRole.Arn
      ScheduleExpression: "cron(0 8 * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "StopStartServiceFunction"
              - "Arn"
          Id: stopServiceFn
          Input: '{"start": true}'

  ###################### DNS NAMESPACE & DISCOVERY
  PrivateDNSNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Vpc: !Ref VPC
      Name: !Sub cloud-atlas-${Environment}

  ServiceDiscoveryCloudAtlas:
    Type: "AWS::ServiceDiscovery::Service"
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: SRV
            TTL: 60
        NamespaceId: !GetAtt PrivateDNSNamespace.Id
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Sub cloud.atlas.${Environment}

    # ######### CLOUDWATCH
  ApplicationLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub cloud-atlas-${Environment}-ecs-log-group
      RetentionInDays: 14

  ###### HTTP API
  HttpApiVPCLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: !Ref Environment
      SecurityGroupIds:
        - !Ref ContainerSecurityGroup
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      Tags:
        Name: !Sub cloud-atlas-${Environment}-vpc-link

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub cloud-atlas-${Environment}-api
      ProtocolType: HTTP

  HttpApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "ANY /{proxy+}"
      Target: !Sub "integrations/${HttpApiIntegration}"

  HttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      ConnectionId: !GetAtt HttpApiVPCLink.VpcLinkId
      ConnectionType: VPC_LINK
      Description: !Sub cloud-atlas-${Environment} api integration
      IntegrationMethod: ANY
      IntegrationType: HTTP_PROXY
      IntegrationUri: !GetAtt ServiceDiscoveryCloudAtlas.Arn
      PayloadFormatVersion: "1.0"
      RequestParameters:
        "overwrite:header.customauthheader": "$request.header.customauthheader"
        "overwrite:path": "$request.path"

  HttpApiDemoStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: demo
      AutoDeploy: true

  # ####### ECS
  FargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "cloud-atlas-${Environment}"
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub "cloud-atlas-${Environment}-container"
          Image: !Join
            - ""
            - - !Sub ${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/cloud-atlas-api
              - ":latest"
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub cloud-atlas-${Environment}-ecs-log-group
              awslogs-region: us-east-1
              awslogs-stream-prefix: ecs
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: "tcp"
              AppProtocol: http
          Environment:
            - Name: APP_VERSION
              Value: !Sub ${Environment}
            - Name: ATLAS_TABLE_NAME
              Value: !Sub "cloud-atlas-${Environment}-atlas"
            - Name: BIND_ADDRESS
              Value: 0.0.0.0
            - Name: DOMAIN
              Value: !Ref HttpApi
            - Name: DUMP_BUCKET_NAME
              Value: !Sub "cloud-atlas-${Environment}-dump"
            - Name: ENVIRONMENT
              Value: !Sub ${Environment}
            - Name: GRACEFUL_SHUTDOWN_TIMEOUT_IN_MSECS
              Value: 10000
            - Name: IMAGES_TABLE_LSI_NAME
              Value: !Sub "cloud-atlas-${Environment}-images-table-LSI"
            - Name: IMAGES_TABLE_NAME
              Value: !Sub "cloud-atlas-${Environment}-images"
            - Name: LOG_LEVEL
              Value: error
            - Name: MARKERS_TABLE_NAME
              Value: !Sub "cloud-atlas-${Environment}-markers"
            - Name: OPTIMIZED_BUCKET_NAME
              Value: !Sub "cloud-atlas-${Environment}-optimized"
            - Name: OPTIMIZED_PHOTOS_DISTRIBUTION_URL
              Value: !GetAtt OptimizedPhotosCloudfrontDistribution.DomainName
            - Name: OPTIMIZED_PHOTOS_KEYPAIR_ID
              Value: !GetAtt OptimizedPhotosCloudfrontPublicKey.Id
            - Name: OPTIMIZED_PHOTOS_PRIVATE_KEY_NAME
              Value: !Sub "cloud-atlas-${Environment}-cloudfront-private-key"
            - Name: OWNERS_TABLE_LSI_NAME
              Value: !Sub "cloud-atlas-${Environment}-owners-table-LSI"
            - Name: OWNERS_TABLE_NAME
              Value: !Sub "cloud-atlas-${Environment}-owners"
            - Name: PORT
              Value: 3000
            - Name: PRESIGNED_URL_EXPIRATION_IN_SECONDS
              Value: 300
            - Name: PROTOCOL
              Value: http
            - Name: PUBLIC_KEY_URI
              Value: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}/.well-known/jwks.json"
            - Name: QUEUE_ENABLED
              Value: true
            - Name: QUEUE_MAX_NUM_MESSAGES
              Value: 10
            - Name: QUEUE_POLLING_INTERVAL
              Value: 2000
            - Name: QUEUE_URL
              Value: !Ref OptimizedImagesQueue
            - Name: QUEUE_WAIT_TIME_SECONDS
              Value: 10
            - Name: REGION
              Value: us-east-1
            - Name: REQUIRE_AUTH
              Value: false
            - Name: SUBDOMAIN
              Value: www
            - Name: TOPIC_ARN
              Value: !GetAtt BucketEventsTopic.TopicArn
            - Name: TOPIC_ENABLED
              Value: true

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "cloud-atlas-${Environment}"
      CapacityProviders:
        - FARGATE_SPOT

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: "FARGATE"
      ServiceName: !Sub "cloud-atlas-${Environment}-service"
      TaskDefinition: !Ref FargateTaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryCloudAtlas.Arn
          Port: 3000
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo

  TaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "cloud-atlas-${Environment}-ecsTaskRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource: !Sub arn:aws:s3:::cloud-atlas-${Environment}-dump/*
              - Effect: "Allow"
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                Resource: !GetAtt OptimizedImagesQueue.Arn
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: !GetAtt BucketEventsTopic.TopicArn
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:Query"
                Resource:
                  - !GetAtt ImagesTable.Arn
                  - !Join
                    - ""
                    - - !GetAtt ImagesTable.Arn
                      - !Sub "/index/cloud-atlas-${Environment}-images-table-LSI"
                  - !GetAtt AtlasTable.Arn
                  - !GetAtt MarkersTable.Arn
                  - !GetAtt OwnersTable.Arn
                  - !Join
                    - ""
                    - - !GetAtt OwnersTable.Arn
                      - !Sub "/index/cloud-atlas-${Environment}-owners-table-LSI"
              - Effect: "Allow"
                Action:
                  - !Sub secretsmanager:GetSecretValue
                Resource:
                  - !Ref CloudfrontPrivateKey
  ######################### Parameters Store
  AppNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-app-name-parameter
      Type: String
      Value: !Sub cloud-atlas-${Environment}
  ApiEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-api-endpoint-parameter
      Type: String
      Value: !Join
        - ""
        - - !GetAtt HttpApi.ApiEndpoint
          - !Sub /${Environment}
  AuthorityParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-authority-parameter
      Type: String
      Value: !Join
        - ""
        - - https://cognito-idp.us-east-1.amazonaws.com/
          - !Ref CognitoUserPool
  AuthWellknownEndpointUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-auth-well-known-endpoint-url-parameter
      Type: String
      Value: !Join
        - ""
        - - https://cognito-idp.us-east-1.amazonaws.com/
          - !Ref CognitoUserPool
  RedirectUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-redirect-url-parameter
      Type: String
      Value: !Join
        - ""
        - - "https://"
          - demo.cloud-atlas.net
          - "/redirect"
  PostLogoutRedirectUriParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-post-logout-redirect-uri-parameter
      Type: String
      Value: !Join
        - ""
        - - "https://"
          - demo.cloud-atlas.net
  ClientIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-clientid-parameter
      Type: String
      Value: !Ref CognitoUserPoolClient
  RenewTimeBeforeTokenExpiresInSecondsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-renew-time-before-token-expires-parameter
      Type: String
      Value: 30
  RegionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-region-parameter
      Type: String
      Value: !Sub ${AWS::Region}
  UserPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-user-pool-id-parameter
      Type: String
      Value: !Ref CognitoUserPool
  MaxImageFileSizeInBytesParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-max-image-file-size-in-bytes-parameter
      Type: String
      Value: 20971520
  GoogleMapIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-google-map-id-parameter
      Type: String
      Value: changeme
  GoogleMapsApiKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-google-maps-api-key-parameter
      Type: String
      Value: changeme
  IdTokenExpirationInMilisecondsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-id-token-expiration-in-miliseconds-parameter
      Type: String
      Value: 86400000
  LogoutUriParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-logout-uri-parameter
      Type: String
      Value: !Join
        - ""
        - - "https://"
          - !GetAtt UICloudfrontDistribution.DomainName
  MapsLimitParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-maps-limit-parameter
      Type: String
      Value: 25
  MarkersLimitParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-markers-limit-parameter
      Type: String
      Value: 100
  ImagesLimitParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub cloud-atlas-${Environment}-images-limit-parameter
      Type: String
      Value: 40

  #####################UI Build
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cloud-atlas-${Environment}-code-build-service-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceArn: !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/cloud-atlas-${Environment}-ui-build
      Policies:
        - PolicyName: buildPolicyLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: buildPolicyLogs
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: buildPolicySSM
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: buildPolicySSM
                Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-app-name-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-api-endpoint-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-authority-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-auth-well-known-endpoint-url-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-redirect-url-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-post-logout-redirect-uri-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-clientid-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-renew-time-before-token-expires-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-region-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-user-pool-id-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-max-image-file-size-in-bytes-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-google-map-id-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-google-maps-api-key-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-id-token-expiration-in-miliseconds-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-logout-uri-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-maps-limit-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-markers-limit-parameter
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cloud-atlas-${Environment}-images-limit-parameter
        - PolicyName: buildPolicyS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: buildPolicyS3
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::cloud-atlas-${Environment}-ui
                  - !Sub arn:aws:s3:::cloud-atlas-${Environment}-ui/*
        - PolicyName: buildPolicyCodeCommit
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: buildPolicyCodeCommit
                Effect: Allow
                Action:
                  - codecommit:GitPull
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetRepository
                Resource: !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:cloud-atlas-ui

  UIBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn: CodeBuildServiceRole
    Properties:
      Name: !Sub cloud-atlas-${Environment}-ui-build
      ServiceRole: !Sub arn:aws:iam::${AWS::AccountId}:role/cloud-atlas-${Environment}-code-build-service-role
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        EnvironmentVariables:
          - Name: environmentName
            Value: !Sub ${Environment}
            Type: PLAINTEXT
          - Name: appName
            Value: !Sub cloud-atlas-${Environment}-app-name-parameter
            Type: PARAMETER_STORE
          - Name: api_endpoint
            Value: !Sub cloud-atlas-${Environment}-api-endpoint-parameter
            Type: PARAMETER_STORE
          - Name: authority
            Value: !Sub cloud-atlas-${Environment}-authority-parameter
            Type: PARAMETER_STORE
          - Name: authWellknownEndpointUrl
            Value: !Sub cloud-atlas-${Environment}-auth-well-known-endpoint-url-parameter
            Type: PARAMETER_STORE
          - Name: redirectUrl
            Value: !Sub cloud-atlas-${Environment}-redirect-url-parameter
            Type: PARAMETER_STORE
          - Name: postLogoutRedirectUri
            Value: !Sub cloud-atlas-${Environment}-post-logout-redirect-uri-parameter
            Type: PARAMETER_STORE
          - Name: clientId
            Value: !Sub cloud-atlas-${Environment}-clientid-parameter
            Type: PARAMETER_STORE
          - Name: renewTimeBeforeTokenExpiresInSeconds
            Value: !Sub cloud-atlas-${Environment}-renew-time-before-token-expires-parameter
            Type: PARAMETER_STORE
          - Name: region
            Value: !Sub cloud-atlas-${Environment}-region-parameter
            Type: PARAMETER_STORE
          - Name: userPoolId
            Value: !Sub cloud-atlas-${Environment}-user-pool-id-parameter
            Type: PARAMETER_STORE
          - Name: maxImageFileSizeInBytes
            Value: !Sub cloud-atlas-${Environment}-max-image-file-size-in-bytes-parameter
            Type: PARAMETER_STORE
          - Name: googleMapId
            Value: !Sub cloud-atlas-${Environment}-google-map-id-parameter
            Type: PARAMETER_STORE
          - Name: googleMapsApiKey
            Value: !Sub cloud-atlas-${Environment}-google-maps-api-key-parameter
            Type: PARAMETER_STORE
          - Name: idTokenExpirationInMiliseconds
            Value: !Sub cloud-atlas-${Environment}-id-token-expiration-in-miliseconds-parameter
            Type: PARAMETER_STORE
          - Name: logoutUri
            Value: !Sub cloud-atlas-${Environment}-logout-uri-parameter
            Type: PARAMETER_STORE
          - Name: mapsLimit
            Value: !Sub cloud-atlas-${Environment}-maps-limit-parameter
            Type: PARAMETER_STORE
          - Name: markersLimit
            Value: !Sub cloud-atlas-${Environment}-markers-limit-parameter
            Type: PARAMETER_STORE
          - Name: imagesLimit
            Value: !Sub cloud-atlas-${Environment}-images-limit-parameter
            Type: PARAMETER_STORE
      Source:
        BuildSpec: buildspec-ui.yaml
        Location: https://git-codecommit.us-east-1.amazonaws.com/v1/repos/cloud-atlas-ui
        Type: CODECOMMIT
