AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  Environment:
    Type: String
    AllowedValues:
      - test
      - demo
      - production
    Default: test
Resources:
  ApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "cloud-atlas-api"
      Description: "API Gateway for cloud-atlas"
      FailOnWarnings: true

  ApiGatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: "{proxy+}"
      RestApiId:
        Ref: "ApiGatewayRestApi"

  ApiGatewayStageTest:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      StageName: "test"
      RestApiId:
        Ref: "ApiGatewayRestApi"
      DeploymentId:
        Ref: "ApiGatewayDeployment"
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          CachingEnabled: false

  ApiGatewayStageDemo:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      StageName: "demo"
      RestApiId:
        Ref: "ApiGatewayRestApi"
      DeploymentId:
        Ref: "ApiGatewayDeployment"
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          CachingEnabled: false

  ApiGatewayStageProduction:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      StageName: "production"
      RestApiId:
        Ref: "ApiGatewayRestApi"
      DeploymentId:
        Ref: "ApiGatewayDeployment"
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          CachingEnabled: false

  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "ApiGatewayMethodOptions"
      - "ApiGatewayMethodAny"
    Properties:
      RestApiId:
        Ref: "ApiGatewayRestApi"
      StageName: "base"

  ApiGatewayMethodOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "OPTIONS"
      ResourceId:
        Ref: "ApiGatewayResource"
      RestApiId:
        Ref: "ApiGatewayRestApi"
      Integration:
        Type: "MOCK"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,ANY'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayMethodAny:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      # AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: "ANY"
      ResourceId:
        Ref: "ApiGatewayResource"
      RestApiId:
        Ref: "ApiGatewayRestApi"
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        IntegrationHttpMethod: "ANY"
        Type: "HTTP_PROXY"
        RequestParameters:
          integration.request.path.proxy: "method.request.path.proxy"
        Uri: http://44.201.115.167:3000/{proxy}
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  ApiGatewayAuthorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      Name: "CognitoAuthorizer"
      Type: "COGNITO_USER_POOLS"
      IdentitySource: "method.request.header.authorization"
      RestApiId:
        Ref: "ApiGatewayRestApi"
      ProviderARNs:
        - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/cloud-atlas-${Environment}-user-pool"

Outputs:
  ApiGatewayUrl:
    Description: "URL for the API Gateway"
    Value:
      Fn::Sub: "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com"
    Export:
      Name: !Sub "cloud-atlas-${Environment}-api-gateway-endpoint"
