AWSTemplateFormatVersion: "2010-09-09"

Description: Demo of an AWS Fargate cluster hosting APIs exposed through API Gateway.

Parameters:
  EnvironmentName:
    Type: String
    Default: ecsapi-demo
    Description: "A friendly environment name that will be used for namespacing all cluster resources. Example: staging, qa, or production"
  PrivateDNSNamespaceName:
    Type: String
    Default: service
    Description: "The private DNS name that identifies the name that you want to use to locate your resources"
  MinContainersFoodstoreFoods:
    Type: Number
    Default: 3
    Description: "Minimum number of ECS tasks per ECS service"
  MaxContainersFoodstoreFoods:
    Type: Number
    Default: 30
    Description: "Maximum number of ECS tasks per ECS service"
  AutoScalingTargetValueFoodstoreFoods:
    Type: Number
    Default: 50
    Description: "Target CPU utilizatio (%) for ECS services auto scaling"
  MinContainersPetstorePets:
    Type: Number
    Default: 3
    Description: "Minimum number of ECS tasks per ECS service"
  MaxContainersPetstorePets:
    Type: Number
    Default: 30
    Description: "Maximum number of ECS tasks per ECS service"
  AutoScalingTargetValuePetstorePets:
    Type: Number
    Default: 50
    Description: "Target CPU utilizatio (%) for ECS services auto scaling"

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    PublicOne:
      CIDR: "10.0.0.0/24"

Resources:
  DynamoDBTableFoodstoreFoods:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: foodId
          AttributeType: S
      KeySchema:
        - AttributeName: foodId
          KeyType: HASH

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ["SubnetConfig", "VPC", "CIDR"]

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "PublicOne", "CIDR"]
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "InternetGateway"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "InternetGateway"

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable

  # NatGatewayOneAttachment:
  #   Type: AWS::EC2::EIP
  #   DependsOn: GatewayAttachement
  #   Properties:
  #     Domain: vpc

  # NatGatewayOne:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
  #     SubnetId: !Ref PublicSubnetOne

  # PrivateRouteTableOne:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref "VPC"

  # PrivateRouteOne:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTableOne
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGatewayOne

  # PrivateRouteTableOneAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTableOne
  #     SubnetId: !Ref PrivateSubnetOne

  # DynamoDBEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Action: "*"
  #           Principal: "*"
  #           Resource: "*"
  #     RouteTableIds:
  #       - !Ref "PrivateRouteTableOne"
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
  #     VpcId: !Ref "VPC"

  ECSCluster:
    Type: AWS::ECS::Cluster

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref "VPC"

  ContainerSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ContainerSecurityGroup
      SourceSecurityGroupId: !Ref ContainerSecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:AttachNetworkInterface"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:CreateNetworkInterfacePermission"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DeleteNetworkInterfacePermission"
                  - "ec2:Describe*"
                  - "ec2:DetachNetworkInterface"

                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RegisterTargets"
                Resource: "*"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  PrivateDNSNamespace:
    Type: "AWS::ServiceDiscovery::PrivateDnsNamespace"
    Properties:
      Vpc: !Ref VPC
      Name: !Ref PrivateDNSNamespaceName

  ServiceDiscoveryServiceFoodstoreFoods:
    Type: "AWS::ServiceDiscovery::Service"
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: SRV
            TTL: 60
        NamespaceId: !Ref PrivateDNSNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: "foods.foodstore"

  TaskRoleFoodstoreFoods:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: dynamodb-table-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGet*
                  - dynamodb:DescribeStream
                  - dynamodb:DescribeTable
                  - dynamodb:Get*
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWrite*
                  - dynamodb:CreateTable
                  - dynamodb:Delete*
                  - dynamodb:Update*
                  - dynamodb:PutItem
                Resource: !GetAtt DynamoDBTableFoodstoreFoods.Arn

  TaskDefinitionFoodstoreFoods:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      TaskRoleArn: !GetAtt TaskRoleFoodstoreFoods.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: "FoodstoreFoods"
          Image: "simonepomata/ecsapi-demo-foodstore:latest"
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Environment:
            - Name: DynamoDBTable
              Value: !Ref DynamoDBTableFoodstoreFoods
      NetworkMode: awsvpc
      Memory: "512"
      Cpu: "256"

  ServiceFoodstoreFoods:
    Type: AWS::ECS::Service
    DependsOn:
      - PublicSubnetOne
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinitionFoodstoreFoods
      LaunchType: FARGATE
      DesiredCount: 3
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryServiceFoodstoreFoods.Arn
          Port: 8080
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnetOne
          SecurityGroups:
            - !Ref ContainerSecurityGroup

  HttpApiVPCLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: !Ref EnvironmentName
      SecurityGroupIds:
        - !Ref ContainerSecurityGroup
      SubnetIds:
        - !Ref PublicSubnetOne

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body:
        openapi: "3.0.1"
        info:
          title: !Ref EnvironmentName
        paths:
          /foodstore/foods/{foodId}:
            get:
              responses:
                default:
                  description: "Default response for GET /foodstore/foods/{foodId}"
              x-amazon-apigateway-integration:
                payloadFormatVersion: "1.0"
                connectionId: !Ref HttpApiVPCLink
                type: "http_proxy"
                httpMethod: "ANY"
                uri: !GetAtt ServiceDiscoveryServiceFoodstoreFoods.Arn
                connectionType: "VPC_LINK"
            put:
              responses:
                default:
                  description: "Default response for PUT /foodstore/foods/{foodId}"
              security:
                - my-authorizer: []
              x-amazon-apigateway-integration:
                payloadFormatVersion: "1.0"
                connectionId: !Ref HttpApiVPCLink
                type: "http_proxy"
                httpMethod: "ANY"
                uri: !GetAtt ServiceDiscoveryServiceFoodstoreFoods.Arn
                connectionType: "VPC_LINK"
        x-amazon-apigateway-cors:
          # This is a Test client web app that invokes the API, used in the blog post, for demostration purposes only.
          # In production, make sure that you do NOT allow any untrusted origin.
          allowOrigins:
            - "https://master.d34am23lsz3nvz.amplifyapp.com"
          allowHeaders:
            - "*"
          allowMethods:
            - "PUT"
            - "GET"
        x-amazon-apigateway-importexport-version: "1.0"

  HttpApiStage:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      StageName: "$default"
      ApiId: !Ref "HttpApi"
      AutoDeploy: true
